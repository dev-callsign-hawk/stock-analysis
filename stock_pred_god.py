# -*- coding: utf-8 -*-
"""stock_pred_god.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T6If7zsWNhPmCIGeYXIggoGktB9DqWBA
"""

import yfinance as yf

ticker = 'NKL'

start_date= '2019-01-01'
end_date = '2024-01-01'

stock_data = yf.download(ticker , start= start_date , end = end_date)

stock_data.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(12,5))
plt.plot(stock_data['Close'] , label ="close_price" , color='blue')
plt.xlabel('date')
plt.ylabel('price')
plt.title(f'{ticker} stock closing price over time ')
plt.legend()
plt.show()

plt.figure(figsize=(12,5))
plt.plot(stock_data['Open'] , label="open_price" , color='green')
plt.xlabel('date')
plt.ylabel('price')
plt.title(f'{ticker} stock opening price over time ')
plt.legend()
plt.show()

stock_data['7-day MA'] = stock_data['Close'].rolling(window=7).mean()
stock_data['30-day MA'] = stock_data['Close'].rolling(window=30).mean()

plt.figure(figsize=(25,5))
plt.plot(stock_data['Close'] , label="open_price" , color='green')
plt.plot(stock_data['7-day MA'] , label='7-day MA' , color='red')
plt.plot(stock_data['30-day MA'] , label='30-day MA' , color='orange')
plt.xlabel('date')
plt.ylabel('price')
plt.title(f'{ticker} stock closing price over time with moving average')
plt.legend()
plt.show()

correlation_matrix= stock_data[['Close' , 'Open' , 'High' , 'Low' , 'Volume']]

import seaborn as sns

plt.figure(figsize=(12,5))
sns.heatmap(correlation_matrix.corr(), annot=True, cmap='crest' , fmt='.2f')
plt.title('Correlation matrix')
plt.show()

stock_data['prev_Close'] = stock_data['Close'].shift(1)
print(stock_data[['Close', 'prev_Close']].head(50))

stock_data['prev_Close'] = stock_data['Close'].shift(1)
stock_data

import pandas as pd

stock_data.columns

stock_data.index = pd.to_datetime(stock_data.index)

stock_data['Day']= stock_data.index.dayofweek
stock_data['Month']= stock_data.index.month
stock_data['Year']= stock_data.index.year
stock_data['Date_of_Month'] = stock_data.index.day

stock_data['isweekend?'] = stock_data['Day'].isin([5,6])

stock_data[['Day' , 'Month' , 'Year', 'Date_of_Month' , 'isweekend?']]

stock_data[('Prev_Close', 'NKL')] = stock_data[('Close', 'NKL')].shift(1)

stock_data[('Prev_Close', 'NKL')].head(10)

stock_data['Price_change'] = stock_data[('Close', 'NKL')] - stock_data[('Prev_Close', 'NKL')]

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

features = [('Day', ''), ('Month', ''), ('Date_of_Month', ''), ('Year', ''), ('isweekend?', ''),
            ('7-day MA', ''), ('30-day MA', ''), ('Price_change', '')]

X1 = stock_data[features]
y1 = stock_data[('Close', 'NKL')].shift(-1)

X1 = X1[:-1]  # Drop the last row of X because `y` will be NaN for the last row
y1 = y1.dropna()



print(X1.shape)  # Check the shape of the feature matrix
print(y1.shape)

print(X1.isna().sum())  # Make sure there are no NaN values left in X
print(y1.isna().sum())

# Make sure there are no NaN values left in X
print(y1.isna().sum())

X_train1, X_test1, y_train1, y_test1 = train_test_split(X1, y1, test_size=0.2, random_state=42)
from xgboost import XGBRegressor
model1 = XGBRegressor()

# Train the model
model1.fit(X_train1, y_train1)

# Make predictions
y_pred1 = model1.predict(X_test1)

from sklearn.metrics import mean_squared_error
import numpy as np
mse= mean_squared_error(y_test1 , y_pred1)
print(f'mean squared error : {mse}')

rmse= np.sqrt(mse)
print(f'root mean squared error : {rmse}')

plt.figure(figsize=(12,5))
plt.plot(y_test1.index , y_pred1 , label='predicted_price' , color='red')
plt.plot(y_test1.index , y_test1 , label='actual_price' , color='green')
plt.xlabel('date')
plt.ylabel('price')
plt.title(f'{ticker} pred vs actual ')
plt.legend()
plt.show()

"""New trial of stock adding more predictors and features like volatility , Bollinger bands , Average time range , exponential moving average ."""

stock_data['Price_change'] = stock_data['Close'].pct_change() * 100

stock_data['Log_Returns'] = np.log(stock_data['Close'] / stock_data['Close'].shift(1))

stock_data['Price_to_prev'] = stock_data['Close'] / stock_data['prev_Close']

# Assuming 'Close' and 'prev_Close' are the first level of the multi-index and the second level is 'NKL'
stock_data['Price_to_prev'] = stock_data[('Close', 'NKL')] / stock_data[('prev_Close', '')]

delta = stock_data['Close'].diff()
gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()

# Compute the relative strength (RS)
rs = gain / loss
stock_data['RSI'] = 100 - (100 / (1 + rs))

stock_data['EMA_7'] = stock_data['Close'].ewm(span=7, adjust=False).mean()
stock_data['EMA_30'] = stock_data['Close'].ewm(span=30, adjust=False).mean()
stock_data['MACD'] = stock_data[('EMA_7','')] - stock_data[('EMA_30' , '')]

# Signal line (9-day EMA of the MACD)
stock_data['Signal_Line'] = stock_data['MACD'].ewm(span=14, adjust=False).mean()

stock_data['volatility_7'] = stock_data['Close'].rolling(window=7).std()
stock_data['volatility_30'] = stock_data['Close'].rolling(window=30).std()

stock_data['High_Low'] = stock_data['High'] - stock_data['Low']
stock_data['High_Close'] = np.abs(stock_data['High'] - stock_data['Close'].shift(1))
stock_data['Low_Close'] = np.abs(stock_data['Low'] - stock_data['Close'].shift(1))
stock_data['ATR_14'] = stock_data[['High_Low', 'High_Close', 'Low_Close']].max(axis=1).rolling(window=14).mean()

stock_data['SMA_20'] = stock_data['Close'].rolling(window=20).mean()
stock_data['Bollinger_Upper'] = stock_data['SMA_20'] + 2 * stock_data[('Close','NKL')].rolling(window=14).std()
stock_data['Bollinger_Lower'] = stock_data['SMA_20'] - 2 * stock_data[('Close','NKL')].rolling(window=14).std()

# Stochastic Oscillator (14-day)
stock_data['Stochastic_14'] = 100 * ((stock_data['Close'] - stock_data['Low'].rolling(window=14).min()) /
                             (stock_data['High'].rolling(window=14).max() - stock_data['Low'].rolling(window=14).min()))

stock_data['Target']= stock_data['Close'].shift(1)

features = [
    ('Close','NKL'), ('7-day MA','') , ('30-day MA', ''), ('EMA_7',''), ('EMA_30',''), ('MACD',''), ('Signal_Line',''),
    ('Price_to_prev',''), ('Price_change',''), ('isweekend?',''), ('volatility_7',''), ('volatility_30',''),
    ('Bollinger_Upper',''), ('Bollinger_Lower',''), ('ATR_14',''), ('Stochastic_14','')
]

X_new = stock_data[features]
y_new = stock_data['Target'].dropna()

#X=X[:-1]
X_new=X_new[:-1]

X_new.shape

y_new.shape

X_train, X_test, y_train, y_test = train_test_split(X_new, y_new, test_size=0.25, shuffle=False)

import xgboost as xgb
from sklearn.metrics import mean_squared_error, mean_absolute_error

model = xgb.XGBRegressor(
    n_estimators=100,
    learning_rate= 0.1,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8
)

model.fit(X_train , y_train)

y_pred = model.predict(X_test)

mse= mean_squared_error(y_test , y_pred)
rmse = np.sqrt(mse)
mae= mean_absolute_error(y_test , y_pred)
print(f'mean squared error : {mse}')
print(f'root mean squared error : {rmse}')
print(f'mean absolute error : {mae}')

plt.figure(figsize=(10,6))
plt.plot(y_test.index, y_test, label='Actual', color='blue')
plt.plot(y_test.index, y_pred, label='Predicted', color='red')
plt.legend()
plt.title('Actual vs Predicted Closing Prices')
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

